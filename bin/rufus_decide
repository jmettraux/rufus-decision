#!/usr/bin/env ruby

$:.unshift(File.dirname(__FILE__) + '/../lib') \
  if File.exist?(File.dirname(__FILE__) + '/../lib/rufus')
    # in dev mode, use the local rufus/decision

require 'rubygems'
require 'rufus/decision'

rest = []
opts = {}
while arg = ARGV.shift do
  if arg.match(/^-/)
    opts[arg] = (ARGV.first &&  ! ARGV.first.match(/^-/)) ? ARGV.shift : true
  else
    rest << arg
  end
end

USAGE = %{

  = #{File.basename(__FILE__)} -i input.csv -t table.csv

  runs decision table 'table.csv' on input 'input.csv', outputs as CSV.

  == for example

  #{File.basename(__FILE__)} -i input.csv -t table.csv

  == options

  -v, --version     : print the version of itog.rb and exits
  -h, --help        : print this help text and exits

  -i, --input       : points to input file (mandatory)
  -t, --table       : points to the decision table file (mandatory)

  -r, --ruby        : output as a Ruby hash representation instead of CSV
  -j, --json        : output as a JSON hash representation instead of CSV

  -T, --through     : don't stop at first match, run each row
  -I, --ignore-case : ignore case when comparing values for row matching
  -A, --accumulate  : use with -t, each time a new match is made for an 'out',
                      values are not overriden but gathered in an array
  -R, --ruby-eval   : allow evaluation of embedded ruby code (potentially 
                      harmful)

  -g, --goal        : points to an ideal target CSV file
                      (decision table testing)

}

if (opts['-h'] or opts['--help'])
  puts USAGE
  exit(0)
end

if (opts['-v'] or opts['--version'])
  puts "rufus-decision #{Rufus::Decision::VERSION}"
  exit(0)
end

ipath = opts['-i'] || opts['--input']
tpath = opts['-t'] || opts['--table']
gpath = opts['-g'] || opts['--goal']

if ipath == nil or tpath == nil

  puts
  puts "  ** missing --input and/or --table parameter"
  puts USAGE
  exit(1)
end

#
# load CSV files

input = Rufus::Decision.csv_to_a(ipath)
input = Rufus::Decision.transpose(input)

params = {}
params[:ignore_case] = opts['-I'] || opts['--ignore-case']
params[:ruby_eval] = opts['-R'] || opts['--ruby-eval']
params[:through] = opts['-T'] || opts['--through']
params[:accumulate] = opts['-A'] || opts['--accumulate']

table = Rufus::Decision::Table.new(tpath, params)

goal = gpath ? Rufus::Decision.csv_to_a(gpath) : nil

#
# run the decision table for each input row

output = input.inject([]) { |a, hash| a << table.transform(hash); a }

if goal
  #
  # check if output matches 'goal'

  puts

  goal = Rufus::Decision.transpose(goal)

  failures = []

  goal.each_with_index do |hash, y|
    if hash == output[y]
      print '.'
    else
      print 'f'
      failures << [ y, output[y], hash ]
    end
  end

  puts

  failures.each do |f|
    row, output, expected = f
    puts
    puts "  at row #{row}, expected"
    puts "    #{expected.inspect}"
    puts "  but got"
    puts "    #{output.inspect}"
  end

  puts "\n#{goal.size} rows, #{failures.size} failures"

else
  #
  # print output

  if opts['-j'] or opts['--json']

    require 'json' # sudo gem install json
    puts output.to_json

  elsif opts['-r'] or opts['--ruby']

    p output

  else # CSV

    output = Rufus::Decision.transpose(output)
    output.each do |row|
      puts row.join(',')
    end
  end
end

